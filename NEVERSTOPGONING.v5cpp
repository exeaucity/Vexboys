{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT16, ratio18_1, false);\nmotor leftMotorB = motor(PORT9, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT10, ratio18_1, true);\nmotor rightMotorB = motor(PORT17, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\ndigital_out DigitalOutA = digital_out(Brain.ThreeWirePort.A);\nmotor Motor20T = motor(PORT20, ratio36_1, false);\n\nmotor MotorGroup5et6MotorA = motor(PORT5, ratio36_1, false);\nmotor MotorGroup5et6MotorB = motor(PORT6, ratio36_1, false);\nmotor_group MotorGroup5et6 = motor_group(MotorGroup5et6MotorA, MotorGroup5et6MotorB);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonUp/ButtonDown status to control Motor20T\n      if (Controller1.ButtonUp.pressing()) {\n        Motor20T.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Motor20T.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Motor20T.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control MotorGroup5et6\n      if (Controller1.ButtonX.pressing()) {\n        MotorGroup5et6.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        MotorGroup5et6.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        MotorGroup5et6.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n    Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n  //M gauche\n  motor leftMotorA16 = motor(PORT16, true);\n  motor leftMotorB9 = motor(PORT9, true);\n  motor_group leftMotors = motor_group(leftMotorA16, leftMotorB9);\n  //M droit\n  motor rightMotorA10 = motor(PORT10, false);\n  motor rightMotorB17 = motor(PORT17, false);\n  motor_group rightMotors = motor_group(rightMotorA10, rightMotorB17);\n  drivetrain Drivetrain= drivetrain(leftMotors, rightMotors, 259.34, 395, 255, mm, 1);\n  //Motor truc qui tourne\n  motor motorT = motor(PORT6, false);\n  motor motorTb = motor(PORT5, false);\n  motor_group tourne = motor_group(motorT, motorTb);  \n\n\n\n  \n  //avence pour prendre le plot \n  Drivetrain.driveFor(forward, 10, inches, 100, rpm);\n  DigitalOutA.set(true);\n  wait(1, seconds);\n  DigitalOutA.set(false);\n\n  //prend le premier donut\n  Drivetrain.turn(left, 100, rpm);\n  Drivetrain.driveFor(reverse, 10, inches, 100, rpm);\n  tourne.spin(reverse,250,rpm);\n  wait(5,seconds);\n  tourne.stop();\n\n  //prend le deuxieme donut stack\n  //A finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finirA finir\n  Drivetrain.turn(right, 100, rpm);\n  Drivetrain.driveFor(forward, 10, inches, 100, rpm);\n  Drivetrain.driveFor(reverse, 10, inches, 100, rpm);\n  tourne.spin(reverse,250,rpm);\n  wait(5,seconds);\n  tourne.stop(); \n\n  //prend plots miilieux\n  Drivetrain.turn(right, 40, rpm);\n  Drivetrain.driveFor(reverse,10,inches,100,rpm);\n  tourne.spin(reverse,250,rpm);\n  wait(5,seconds);\n  tourne.stop();\n\n  //prend deuxieme plot du milieux\n  Drivetrain.turn(right, 10, rpm);\n  Drivetrain.driveFor(reverse,10,inches,100,rpm);\n  tourne.spin(reverse,250,rpm);\n  wait(5,seconds);\n  tourne.stop();\n  \n\n\n  //Climb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etreClimb peut etre\n  \n\n  \n\n\n\n  Brain.Screen.print(\"SIGMA GOONER\");\n\n  \n}\n","textLanguage":"cpp","robotConfig":[{"port":[16,9,10,17,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"Motor20T","upDownDir":"false","xB":"MotorGroup5et6","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"DigitalOutA","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"Motor20T","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"en avant","rev":"en arrière","gear":"ratio36_1"},"triportSourcePort":22},{"port":[5,6],"name":"MotorGroup5et6","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"en avant","rev":"en arrière","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}